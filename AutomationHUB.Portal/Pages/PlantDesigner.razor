@page "/plant-designer"
@using AutomationHUB.Portal.Diagrams.Behaviors
@using AutomationHUB.Portal.Diagrams.Models
@using AutomationHUB.Portal.Diagrams.Nodes
@using AutomationHUB.Portal.PaletteItems
@using AutomationHUB.Portal.Services
@using AutomationHUB.Portal.ViewModels
@using AutomationHUB.Portal.Widgets
@using Blazor.Diagrams
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets
@using Blazor.Diagrams.Core
@using Blazor.Diagrams.Core.Behaviors
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Core.PathGenerators
@using Blazor.Diagrams.Core.Routers
@using Blazor.Diagrams.Options
@using Microsoft.AspNetCore.Components
@implements IDisposable

@inject IJSRuntime JS
@inject PortalDeviceService PortalDevices

<PageTitle>Floor Planner</PageTitle>

<div style="display:flex; height:100vh;">

    <!-- PALETTE LINKS -->
    <div style="width:fit-content; height:auto; border-right:1px solid #ccc; padding:10px;" @ref="paletteDiv">
        <MudText Typo="Typo.h4" />
        <MudList T="string">
            @foreach (var itemGroup in GroupedItems)
            {
                <MudListItem T="string" Text="@itemGroup.Key" Expanded>
                    <NestedList>
                        @foreach (var item in itemGroup)
                        {
                            <DevicePaletteItem Device="@item" />
                        }
                    </NestedList>
                </MudListItem>
                <MudDivider />
            }
        </MudList>
    </div>

    <!-- CANVAS RECHTS -->
    <div id="myCanvas" class="diagram-container" style="flex:1; position:relative;">
        <MudButton Style="position: absolute; top: 8px; right: 8px; z-index: 1000;" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="@OnAddStationClicked">
            Add Station
        </MudButton>
        <CascadingValue Value="Diagram">
            <DiagramCanvas @ref="DiagramCanvas">
                <Widgets>
                    <SelectionBoxWidget />
                    <GridWidget Size="@GridSize" Mode="GridMode.Line" BackgroundColor="white" />
                </Widgets>
            </DiagramCanvas>
        </CascadingValue>
    </div>
</div>

@code {
    private DotNetObjectReference<PlantDesigner>? _objRef;

    ElementReference paletteDiv;

    IEnumerable<DeviceViewModel> PaletteItems = Array.Empty<DeviceViewModel>();

    IEnumerable<IGrouping<string, DeviceViewModel>> GroupedItems => PaletteItems.GroupBy(x => x.DeviceType);

    // 2) Das Diagramm-Modell mit Grid & Snap aktiviert
    private BlazorDiagram Diagram { get; set; } = new BlazorDiagram();

    private DiagramCanvas DiagramCanvas { get; set; } = null!;

    private int GridSize { get; set; } = 25;

    public void OnAddStationClicked()
    {
        var oldSelectionBehavior = Diagram.GetBehavior<SelectionBehavior>()!;
        Diagram.UnregisterBehavior<SelectionBehavior>();        
        Diagram.RegisterBehavior(new GroupDrawingBehavior(Diagram, oldSelectionBehavior));
    }

    [JSInvokable]
    public async Task OnDroppedInStation(string? paletteItemId, string? stationId, double x, double y)
    {
        Console.WriteLine($"Item {paletteItemId} dropped into Station ({stationId})");

        var groupModel = Diagram.Groups.FirstOrDefault(station => station.Id == stationId);

        //TODO abhandeln, wenne es bereits existierende DeviceNodeModel ist.
        var node = new DeviceNodeModel(PaletteItems.First(x => x.DeviceId == paletteItemId));

        if (groupModel is StationModel stationNode)
        {
            Console.WriteLine($"Station found!");

            var point = Diagram.GetRelativeMousePoint(x, y);

            // Find all existing devices inside the dropzone
            var existingDevices = stationNode.Children.OfType<DeviceNodeModel>().ToList();

            Point positionToPlace;

            if (existingDevices.Count == 0)
            {
                // First device → start at bounding point of the dropzone
                positionToPlace = point;
            }
            else
            {
                // Get last device position + size
                var last = existingDevices.Last();

                var nextX = last.Position.X + last.Size.Width + GridSize;
                var nextY = last.Position.Y;

                positionToPlace = new Point(nextX, nextY);
            }

            node.Position = positionToPlace;   
            Diagram.Nodes.Add(node);
            stationNode.AddChild(node);
        }
    }

    [JSInvokable]
    public async Task OnGhostDropped(string? paletteItemId, double x, double y)
    {
        // hier fügst du in C# deine Node an Position (x,y) ins Canvas ein
        Console.WriteLine($"Item {paletteItemId} dropped at ({x}, {y})");

        var point = Diagram.GetRelativeMousePoint(x, y);

        // Neue Node mit Hintergrund-Farbe aus der Palette
        var node = new DeviceNodeModel(PaletteItems.First(x => x.DeviceId == paletteItemId));

        // 3) die World-Koordinaten als Node-Position verwenden
        node.Position = point;
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Bottom);

        Diagram.Nodes.Add(node);

        var padding = (byte)(GridSize / 2);

        var station = new StationModel([], padding: 35)
        {
            Title = $"{node.Model.DisplayName}_Station"
        };
        station.AddChild(node);
        Diagram.Groups.Add(station);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Diagram.Options.GridSize = GridSize;
        Diagram.Options.AllowMultiSelection = true;
        Diagram.Options.Groups.Enabled = true;
        Diagram.Options.Groups.Factory = (diagram, children) =>
        {
            var group = new StationModel(children);
            Diagram.Groups.Add(group);
            return group;
        };
        Diagram.RegisterComponent<DeviceNodeModel, DeviceCardNode>();
        Diagram.RegisterComponent<StationModel, StationNode>();
    }

    protected override async Task OnInitializedAsync()
    {
        await PortalDevices.InitializeAsync();
        PaletteItems = PortalDevices.GetDevices();
        PortalDevices.OnChange += () =>
        {
            var devices = PortalDevices.GetDevices();
            foreach(var node in Diagram.Nodes)
            {
                if(node is DeviceNodeModel deviceNode && devices.FirstOrDefault(x => x.DeviceId == deviceNode.Model.DeviceId) is DeviceViewModel model)
                {
                    deviceNode.Model = model;
                    deviceNode.Refresh();
                }
            }
            Diagram.Refresh();            
        };
    }

    public void Dispose()
    {
        _objRef?.Dispose();

        Task.Run(async () =>
        {
            try
            {
                await DiagramCanvas.DisposeAsync();
            }
            catch (JSDisconnectedException ex)
            {

            }
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("floorplannerInterop.init", _objRef);            
        }
    }
}
